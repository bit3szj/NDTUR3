// Generated by gencpp from file szj_demo/AdmStatus.msg
// DO NOT EDIT!


#ifndef SZJ_DEMO_MESSAGE_ADMSTATUS_H
#define SZJ_DEMO_MESSAGE_ADMSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace szj_demo
{
template <class ContainerAllocator>
struct AdmStatus_
{
  typedef AdmStatus_<ContainerAllocator> Type;

  AdmStatus_()
    : forceTarget(0.0)
    , forceNow(0.0)
    , paraB(0.0)
    , deltaB(0.0)
    , zdd(0.0)
    , commandVel(0.0)
    , actualVel(0.0)  {
    }
  AdmStatus_(const ContainerAllocator& _alloc)
    : forceTarget(0.0)
    , forceNow(0.0)
    , paraB(0.0)
    , deltaB(0.0)
    , zdd(0.0)
    , commandVel(0.0)
    , actualVel(0.0)  {
  (void)_alloc;
    }



   typedef double _forceTarget_type;
  _forceTarget_type forceTarget;

   typedef double _forceNow_type;
  _forceNow_type forceNow;

   typedef double _paraB_type;
  _paraB_type paraB;

   typedef double _deltaB_type;
  _deltaB_type deltaB;

   typedef double _zdd_type;
  _zdd_type zdd;

   typedef double _commandVel_type;
  _commandVel_type commandVel;

   typedef double _actualVel_type;
  _actualVel_type actualVel;





  typedef boost::shared_ptr< ::szj_demo::AdmStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::szj_demo::AdmStatus_<ContainerAllocator> const> ConstPtr;

}; // struct AdmStatus_

typedef ::szj_demo::AdmStatus_<std::allocator<void> > AdmStatus;

typedef boost::shared_ptr< ::szj_demo::AdmStatus > AdmStatusPtr;
typedef boost::shared_ptr< ::szj_demo::AdmStatus const> AdmStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::szj_demo::AdmStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::szj_demo::AdmStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::szj_demo::AdmStatus_<ContainerAllocator1> & lhs, const ::szj_demo::AdmStatus_<ContainerAllocator2> & rhs)
{
  return lhs.forceTarget == rhs.forceTarget &&
    lhs.forceNow == rhs.forceNow &&
    lhs.paraB == rhs.paraB &&
    lhs.deltaB == rhs.deltaB &&
    lhs.zdd == rhs.zdd &&
    lhs.commandVel == rhs.commandVel &&
    lhs.actualVel == rhs.actualVel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::szj_demo::AdmStatus_<ContainerAllocator1> & lhs, const ::szj_demo::AdmStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace szj_demo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::szj_demo::AdmStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::szj_demo::AdmStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::szj_demo::AdmStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::szj_demo::AdmStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::szj_demo::AdmStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::szj_demo::AdmStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::szj_demo::AdmStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0eec79276a71eca81aff53272305516b";
  }

  static const char* value(const ::szj_demo::AdmStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0eec79276a71eca8ULL;
  static const uint64_t static_value2 = 0x1aff53272305516bULL;
};

template<class ContainerAllocator>
struct DataType< ::szj_demo::AdmStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "szj_demo/AdmStatus";
  }

  static const char* value(const ::szj_demo::AdmStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::szj_demo::AdmStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 forceTarget\n"
"float64 forceNow\n"
"float64 paraB\n"
"float64 deltaB\n"
"float64 zdd\n"
"float64 commandVel\n"
"float64 actualVel\n"
;
  }

  static const char* value(const ::szj_demo::AdmStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::szj_demo::AdmStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.forceTarget);
      stream.next(m.forceNow);
      stream.next(m.paraB);
      stream.next(m.deltaB);
      stream.next(m.zdd);
      stream.next(m.commandVel);
      stream.next(m.actualVel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AdmStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::szj_demo::AdmStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::szj_demo::AdmStatus_<ContainerAllocator>& v)
  {
    s << indent << "forceTarget: ";
    Printer<double>::stream(s, indent + "  ", v.forceTarget);
    s << indent << "forceNow: ";
    Printer<double>::stream(s, indent + "  ", v.forceNow);
    s << indent << "paraB: ";
    Printer<double>::stream(s, indent + "  ", v.paraB);
    s << indent << "deltaB: ";
    Printer<double>::stream(s, indent + "  ", v.deltaB);
    s << indent << "zdd: ";
    Printer<double>::stream(s, indent + "  ", v.zdd);
    s << indent << "commandVel: ";
    Printer<double>::stream(s, indent + "  ", v.commandVel);
    s << indent << "actualVel: ";
    Printer<double>::stream(s, indent + "  ", v.actualVel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SZJ_DEMO_MESSAGE_ADMSTATUS_H
