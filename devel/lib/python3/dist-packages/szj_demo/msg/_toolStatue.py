# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from szj_demo/toolStatue.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class toolStatue(genpy.Message):
  _md5sum = "fc2d79cf8b7f949061e6ffc3b214e01e"
  _type = "szj_demo/toolStatue"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 linearX
float64 linearY
float64 linearZ
float64 angularX
float64 angularY
float64 angularZ
float64 velLinearX
float64 velLinearY
float64 velLinearZ
float64 velAngularX
float64 velAngularY
float64 velAngularZ"""
  __slots__ = ['linearX','linearY','linearZ','angularX','angularY','angularZ','velLinearX','velLinearY','velLinearZ','velAngularX','velAngularY','velAngularZ']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       linearX,linearY,linearZ,angularX,angularY,angularZ,velLinearX,velLinearY,velLinearZ,velAngularX,velAngularY,velAngularZ

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(toolStatue, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.linearX is None:
        self.linearX = 0.
      if self.linearY is None:
        self.linearY = 0.
      if self.linearZ is None:
        self.linearZ = 0.
      if self.angularX is None:
        self.angularX = 0.
      if self.angularY is None:
        self.angularY = 0.
      if self.angularZ is None:
        self.angularZ = 0.
      if self.velLinearX is None:
        self.velLinearX = 0.
      if self.velLinearY is None:
        self.velLinearY = 0.
      if self.velLinearZ is None:
        self.velLinearZ = 0.
      if self.velAngularX is None:
        self.velAngularX = 0.
      if self.velAngularY is None:
        self.velAngularY = 0.
      if self.velAngularZ is None:
        self.velAngularZ = 0.
    else:
      self.linearX = 0.
      self.linearY = 0.
      self.linearZ = 0.
      self.angularX = 0.
      self.angularY = 0.
      self.angularZ = 0.
      self.velLinearX = 0.
      self.velLinearY = 0.
      self.velLinearZ = 0.
      self.velAngularX = 0.
      self.velAngularY = 0.
      self.velAngularZ = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12d().pack(_x.linearX, _x.linearY, _x.linearZ, _x.angularX, _x.angularY, _x.angularZ, _x.velLinearX, _x.velLinearY, _x.velLinearZ, _x.velAngularX, _x.velAngularY, _x.velAngularZ))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 96
      (_x.linearX, _x.linearY, _x.linearZ, _x.angularX, _x.angularY, _x.angularZ, _x.velLinearX, _x.velLinearY, _x.velLinearZ, _x.velAngularX, _x.velAngularY, _x.velAngularZ,) = _get_struct_12d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12d().pack(_x.linearX, _x.linearY, _x.linearZ, _x.angularX, _x.angularY, _x.angularZ, _x.velLinearX, _x.velLinearY, _x.velLinearZ, _x.velAngularX, _x.velAngularY, _x.velAngularZ))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 96
      (_x.linearX, _x.linearY, _x.linearZ, _x.angularX, _x.angularY, _x.angularZ, _x.velLinearX, _x.velLinearY, _x.velLinearZ, _x.velAngularX, _x.velAngularY, _x.velAngularZ,) = _get_struct_12d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12d = None
def _get_struct_12d():
    global _struct_12d
    if _struct_12d is None:
        _struct_12d = struct.Struct("<12d")
    return _struct_12d
